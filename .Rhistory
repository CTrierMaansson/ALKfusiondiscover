scale_fill_manual("ChIP results", values = c("#6a00fc","#ffa10c"))+
geom_text(x = 1, y = height1,
label = paste(round(percent1,2),"%"),
color = "black", size = 5)+
geom_text(x = 2, y = height2,
label = paste(round(percent2,2),"%"),
color = "black", size = 5)+
ylim(0,(max(height1,height2)+2))+
th+
theme(axis.text.x = element_text(size = 14, face = "bold", colour = "black"))
return(gg)
}
bar_overlap(A549_enrichment, HCC827_enrichment, TPM_AVENIO, "log2.HCC827", "log2.A549",
bad, d = 1)
bar_overlap <- function(x,y,z,p,q, b = NULL, d){
library(dplyr)
library(ggplot2)
library(ggpubr)
library(tidyverse)
`%ni%` <- Negate(`%in%`)
if(length(x$genes) == length(y$genes)){
y = y
x = x
}
else{
if (length(x$genes) > length(y$genes)){
niy <- x %>% filter(genes %ni% y$genes)
niy <- length(niy$genes)
x <- x %>% filter(genes %in% y$genes)
}
else{
niy = 0
}
if (length(y$genes) > length(x$genes)){
nix <- y %>% filter(genes %ni% x$genes)
nix <- length(nix$genes)
y <- y %>% filter(genes %in% x$genes)
}
else{
nix = 0
}
}
y <- y[(match(x$genes, y$genes)),]
df <- data.frame(genes = x$genes, x = log2(x$enrichment), y = log2(y$enrichment))
if (is.null(b)){
df <- df
t <- ""
}
else{
df <- df %>% filter(genes %ni% b)
t <- "sorted "
}
res <- summary(lm(y~x, data=df))
a <- res$coefficients[2,1]
c <- res$coefficients[1,1]
df$norm <- df$y-((df$x*a)+c)
df <- df[order(df$norm),]
z1 <- z[colnames(z) %in% c("SYMBOL",p,q)]
index1 <- c(1:length(z1))[colnames(z1) %in% p]
index2 <- c(1:length(z1))[colnames(z1) %in% q]
z1$FC <- z1[,index1]-z1[,index2]
xt <- gsub("log2.", '',p)
yt <- gsub("log2.", '',q)
if (is.null(b)){
z1 <- z1
t <- ""
}
else{
z1 <- z1 %>% filter(SYMBOL %ni% b)
t <- "sorted "
}
rna_df_high <- z1 %>% filter(FC > d)
ChIP_df_high <- df %>% filter(norm > 0) %>% filter(genes %in% rna_df_high$SYMBOL)
rna_df_low <- z1 %>% filter(FC < -d)
ChIP_df_low <- df %>% filter(norm < 0) %>% filter(genes %in% rna_df_low$SYMBOL)
ChIP_negative_high <- rna_df_high %>% filter(SYMBOL %ni% ChIP_df_high$genes)
ChIP_negative_low <- rna_df_low %>% filter(SYMBOL %ni% ChIP_df_low$genes)
df1 <- data.frame(discovery = factor(c("Agree", "Disagree",
"Agree", "Disagree")),
activity = c(rep(paste(xt,"upregulated"),2),
rep(paste(yt,"upregulated"),2)),
numbergenes = c(length(ChIP_df_high$genes)+nix,
length(ChIP_negative_high$SYMBOL)-nix,
length(ChIP_df_low$genes)+niy,
length(ChIP_negative_low$SYMBOL)-niy))
percent1 <- (df1$numbergenes[1])/(df1$numbergenes[1]+df1$numbergenes[2])*100
percent2 <- (df1$numbergenes[3])/(df1$numbergenes[3]+df1$numbergenes[4])*100
height1 <- length(ChIP_df_high$genes)+length(ChIP_negative_high$SYMBOL)
height2 <- length(ChIP_df_low$genes)+length(ChIP_negative_low$SYMBOL)
scales <- c(height1/5, height2/5)
height1 <- height1 + min(scales)
height2 <- height2 + min(scales)
df1$discovery2 <- relevel(df1$discovery, 'Disagree')
gg <- ggplot(data=df1, aes(x = fct_inorder(activity), y = numbergenes, fill = discovery2))+
geom_bar(stat = "identity")+
theme_bw()+
labs(x = "", y="Number of genes")+
scale_fill_manual("ChIP results", values = c("#6a00fc","#ffa10c"))+
geom_text(x = 1, y = height1,
label = paste(round(percent1,2),"%"),
color = "black", size = 5)+
geom_text(x = 2, y = height2,
label = paste(round(percent2,2),"%"),
color = "black", size = 5)+
ylim(0,(max(height1,height2)+2))+
th+
theme(axis.text.x = element_text(size = 14, face = "bold", colour = "black"))
return(gg)
}
bar_overlap(A549_enrichment, HCC827_enrichment, TPM_AVENIO, "log2.HCC827", "log2.A549",
bad, d = 1)
bar_overlap(clone3_enrichment, HCC827_enrichment, TPM_AVENIO, "log2.HCC827", "log2.Clone3",
bad, d = 1)
bar_overlap <- function(x,y,z,p,q, b = NULL, d){
library(dplyr)
library(ggplot2)
library(ggpubr)
library(tidyverse)
`%ni%` <- Negate(`%in%`)
if(length(x$genes) == length(y$genes)){
y = y
x = x
nix = 0
niy = 0
}
else{
if (length(x$genes) > length(y$genes)){
niy <- x %>% filter(genes %ni% y$genes)
niy <- length(niy$genes)
x <- x %>% filter(genes %in% y$genes)
}
else{
niy = 0
}
if (length(y$genes) > length(x$genes)){
nix <- y %>% filter(genes %ni% x$genes)
nix <- length(nix$genes)
y <- y %>% filter(genes %in% x$genes)
}
else{
nix = 0
}
}
y <- y[(match(x$genes, y$genes)),]
df <- data.frame(genes = x$genes, x = log2(x$enrichment), y = log2(y$enrichment))
if (is.null(b)){
df <- df
t <- ""
}
else{
df <- df %>% filter(genes %ni% b)
t <- "sorted "
}
res <- summary(lm(y~x, data=df))
a <- res$coefficients[2,1]
c <- res$coefficients[1,1]
df$norm <- df$y-((df$x*a)+c)
df <- df[order(df$norm),]
z1 <- z[colnames(z) %in% c("SYMBOL",p,q)]
index1 <- c(1:length(z1))[colnames(z1) %in% p]
index2 <- c(1:length(z1))[colnames(z1) %in% q]
z1$FC <- z1[,index1]-z1[,index2]
xt <- gsub("log2.", '',p)
yt <- gsub("log2.", '',q)
if (is.null(b)){
z1 <- z1
t <- ""
}
else{
z1 <- z1 %>% filter(SYMBOL %ni% b)
t <- "sorted "
}
rna_df_high <- z1 %>% filter(FC > d)
ChIP_df_high <- df %>% filter(norm > 0) %>% filter(genes %in% rna_df_high$SYMBOL)
rna_df_low <- z1 %>% filter(FC < -d)
ChIP_df_low <- df %>% filter(norm < 0) %>% filter(genes %in% rna_df_low$SYMBOL)
ChIP_negative_high <- rna_df_high %>% filter(SYMBOL %ni% ChIP_df_high$genes)
ChIP_negative_low <- rna_df_low %>% filter(SYMBOL %ni% ChIP_df_low$genes)
df1 <- data.frame(discovery = factor(c("Agree", "Disagree",
"Agree", "Disagree")),
activity = c(rep(paste(xt,"upregulated"),2),
rep(paste(yt,"upregulated"),2)),
numbergenes = c(length(ChIP_df_high$genes)+nix,
length(ChIP_negative_high$SYMBOL)-nix,
length(ChIP_df_low$genes)+niy,
length(ChIP_negative_low$SYMBOL)-niy))
percent1 <- (df1$numbergenes[1])/(df1$numbergenes[1]+df1$numbergenes[2])*100
percent2 <- (df1$numbergenes[3])/(df1$numbergenes[3]+df1$numbergenes[4])*100
height1 <- length(ChIP_df_high$genes)+length(ChIP_negative_high$SYMBOL)
height2 <- length(ChIP_df_low$genes)+length(ChIP_negative_low$SYMBOL)
scales <- c(height1/5, height2/5)
height1 <- height1 + min(scales)
height2 <- height2 + min(scales)
df1$discovery2 <- relevel(df1$discovery, 'Disagree')
gg <- ggplot(data=df1, aes(x = fct_inorder(activity), y = numbergenes, fill = discovery2))+
geom_bar(stat = "identity")+
theme_bw()+
labs(x = "", y="Number of genes")+
scale_fill_manual("ChIP results", values = c("#6a00fc","#ffa10c"))+
geom_text(x = 1, y = height1,
label = paste(round(percent1,2),"%"),
color = "black", size = 5)+
geom_text(x = 2, y = height2,
label = paste(round(percent2,2),"%"),
color = "black", size = 5)+
ylim(0,(max(height1,height2)+2))+
th+
theme(axis.text.x = element_text(size = 14, face = "bold", colour = "black"))
return(gg)
}
bar_overlap(clone3_enrichment, HCC827_enrichment, TPM_AVENIO, "log2.HCC827", "log2.Clone3",
bad, d = 1)
bar_overlap(A549_enrichment, HCC827_enrichment, TPM_AVENIO, "log2.HCC827", "log2.A549",
bad, d = 1)
versus <- function(x,y,z,r,b = NULL,a = F,g = NULL){
library(dplyr)
library(ggplot2)
library(stringr)
library(ggrepel)
`%ni%` <- Negate(`%in%`)
y1 <- y[colnames(y) %in% c("SYMBOL",z)]
y1 <- y1 %>% filter(SYMBOL %in% x$genes)
y1 <- y1[(match(x$genes, y1$SYMBOL)),]
cell <- paste(gsub("log2.", '',z))
if (is.null(b)){
y1 <- y1
x1 <- x
t <- ""
}
else{
y1 <- y1 %>% filter(SYMBOL %ni% b)
x1 <- x %>% filter(genes %ni% b)
t <- ""
}
if (is.null(g)){
y1 <- y1
x1 <- x1
}
else{
y1 <- y1 %>% filter(SYMBOL %ni% g)
x1 <- x1 %>% filter(genes %ni% g)
}
if (a == TRUE){
y2 <- y1 %>% filter(y1[,2] > r)
x2 <- x1[match(y2$SYMBOL,x1$genes),]
y2 <- y2[(match(x2$genes, y2$SYMBOL)),]
df <- data.frame(genes = x2$genes, ChIP = x2$enrichment, RNA = y2[,2])
tit <-"for active genes"
}
else{
y1 <- y1 %>% filter(SYMBOL %in% x1$genes)
y1 <- y1[(match(x1$genes, y1$SYMBOL)),]
df <- data.frame(genes = x1$genes, ChIP = x1$enrichment, RNA = y1[,2])
tit <- ""
}
res <- cor.test(df$RNA, df$ChIP, method = "spearman")
p_values <- res$p.value
if (p_values < 0.0001){
p <- ", P < 0.0001"
}
else{
p <- paste(", P =", p_values)
}
rhos <- as.numeric(res$estimate)
return(df)
gg <- ggplot(df, aes(x = ChIP, y = RNA))+
geom_point(color="#ffa10c", size = 3)+
theme_bw()+
geom_smooth(aes(x=ChIP, y = RNA), method = "lm", se = F, color = "black")+
labs(title = paste(cell, " RNA-seq correlation with ChIP-seq",tit),
x = "ChIP (Enrichment)", y = "Log2(TPM+1)",
subtitle = paste("Spearman's rho =", round(rhos,3),
as.character(p), ", n =", length(df$ChIP)))+
th
return(gg)
}
versus(A549_enrichment, TPM_AVENIO, "log2.A549", 0.2)
versus(A549_enrichment, TPM_AVENIO, "log2.A549", 0.2, bad)
A549_all <- versus(A549_enrichment, TPM_AVENIO, "log2.A549", 0.2)
A549_sorted <- versus(A549_enrichment, TPM_AVENIO, "log2.A549", 0.2, bad)
A549_all$genes
counts = 0
enrichment = c()
for (i in length(A549_all$genes)){
if(A549_all$genes[i] == A549_sorted$genes[i+counts]){
enrichment[i] <- A549_all$ChIP
}
else{
enrichment[i] <- 0
counts <- counts+1
}
}
counts = 0
enrichment = c()
for (i in length(A549_all$genes)){
print(counts)
if(A549_all$genes[i] == A549_sorted$genes[i+counts]){
enrichment[i] <- A549_all$ChIP
}
else{
enrichment[i] <- 0
counts <- counts+1
}
}
A549_sorted$genes[1]
A549_all$genes[1]
counts = 0
enrichment = c()
for (i in length(A549_all$genes)){
print(i)
print(counts)
if(A549_all$genes[i] == A549_sorted$genes[i+counts]){
enrichment[i] <- A549_all$ChIP
}
else{
enrichment[i] <- 0
counts <- counts+1
}
}
counts = 0
enrichment = c()
for (i in 1:length(A549_all$genes)){
print(i)
print(counts)
if(A549_all$genes[i] == A549_sorted$genes[i+counts]){
enrichment[i] <- A549_all$ChIP
}
else{
enrichment[i] <- 0
counts <- counts+1
}
}
for (i in 1:length(A549_all$genes)){
print(i)
if(A549_all$genes[i] == A549_sorted$genes[i+counts]){
enrichment[i] <- A549_all$ChIP
}
else{
enrichment[i] <- 0
counts <- counts+1
}
}
counts = 0
enrichment = c()
for (i in 1:length(A549_all$genes)){
print(counts)
if(A549_all$genes[i] == A549_sorted$genes[i+counts]){
enrichment[i] <- A549_all$ChIP
}
else{
enrichment[i] <- 0
counts <- counts+1
}
}
library(writexl)
write_xlsx(A549_all, "A549 all.xslx")
write_xlsx(A549_all, "A549 all.xlsx")
write_xlsx(A549_sorted, "A549 sorted.xlsx")
match(A549_all$genes,A549_sorted$genes)
match(A549_sorted$genes,A549_all$genes)
enrichment <- c()
for(i in 1:length(A549_all$genes)){
if(A549_all$genes[i] %in% A549_sorted$genes){
enrichment[i] <- A549_all$ChIP[i]
}
else{
enrichment[i] <- 0
}
}
enrichment
A549_df <- data.frame(genes = A549_all$genes, enrichment = enrichment)
write_xlsx(A549_df, "A549.xlsx")
HCC827_all <- versus(HCC827_enrichment, TPM_AVENIO, "log2.HCC827", 0.2)
A549_sorted <- versus(HCC827_enrichment, TPM_AVENIO, "log2.HCC827", 0.2, bad)
enrichment <- c()
for(i in 1:length(HCC827_all$genes)){
if(HCC827_all$genes[i] %in% HCC827_sorted$genes){
enrichment[i] <- HCC827_all$ChIP[i]
}
else{
enrichment[i] <- 0
}
}
HCC827_sorted <- versus(HCC827_enrichment, TPM_AVENIO, "log2.HCC827", 0.2, bad)
enrichment <- c()
for(i in 1:length(HCC827_all$genes)){
if(HCC827_all$genes[i] %in% HCC827_sorted$genes){
enrichment[i] <- HCC827_all$ChIP[i]
}
else{
enrichment[i] <- 0
}
}
HCC827_df <- data.frame(genes = HCC827_all$genes, enrichment = enrichment)
write_xlsx(HCC827_df, "HCC827.xlsx")
write_xlsx(HCC827_all, "HCC827 all.xlsx")
clone3_all <- versus(clone3_enrichment, TPM_AVENIO, "log2.Clone3", 0.2)
clone3_sorted <- versus(clone3_enrichment, TPM_AVENIO, "log2.Clone3", 0.2, bad)
enrichment <- c()
for(i in 1:length(clone3_all$genes)){
if(clone3_all$genes[i] %in% clone3_sorted$genes){
enrichment[i] <- clone3_all$ChIP[i]
}
else{
enrichment[i] <- 0
}
}
clone3_df <- data.frame(genes = clone3_all$genes, enrichment = enrichment)
write_xlsx(clone3_all, "clone3 all.xlsx")
write_xlsx(clone3_df, "clone3.xlsx")
install.packages("rlang")
install_github("CTrierMaansson/ALKfusiondiscover")
#https://kbroman.org/github_tutorial/
#https://tinyheero.github.io/jekyll/update/2015/07/26/making-your-first-R-package.html
#https://ourcodingclub.github.io/tutorials/writing-r-package/
#https://docs.github.com/en/authentication/connecting-to-github-with-ssh
library(devtools)
install_github("CTrierMaansson/ALKfusiondiscover")
H3122_bam <- system.file("extdata", "H3122_EML4.bam", package = "ALKfusiondiscover")
HCC827_bam <-  system.file("extdata", "HCC827_EML4.bam", package = "ALKfusiondiscover")
EML4_ALK_detection(H3122_bam)
library(ALKfusiondiscover)
EML4_ALK_detection(H3122_bam)
EML4_ALK_detection(HCC827_bam)
head(EML4_ALK_detection(H3122_bam))
head(EML4_ALK_detection(H3122_bam))
H3122_bam <- system.file("extdata", "H3122_EML4.bam", package = "ALKfusiondiscover")
head(EML4_ALK_detection(H3122_bam))
remove.packages("ALKfusiondiscover")
getwd()
setwd("C:/Users/Christoffer/OneDrive/1PhD/ALK patienter/EML4_ALK-detection/ALKfusiondiscover")
H3122_bam <- system.file("extdata", "H3122_EML4.bam", package = "ALKfusiondiscover")
HCC827_bam <-  system.file("extdata", "HCC827_EML4.bam", package = "ALKfusiondiscover")
H3122_bam <- system.file("extdata", "H3122_EML4.bam", package = "ALKfusiondiscover")
HCC827_bam <-  system.file("extdata", "HCC827_EML4.bam", package = "ALKfusiondiscover")
if (!require(devtools)) install.packages('devtools')
library(devtools)
install_github("CTrierMaansson/ALKfusiondiscover")
library(ALKfusiondiscover)
H3122_bam <- system.file("extdata", "H3122_EML4.bam", package = "ALKfusiondiscover")
HCC827_bam <-  system.file("extdata", "HCC827_EML4.bam", package = "ALKfusiondiscover")
.rs.restartR()
if (!require(devtools)) install.packages('devtools')
library(devtools)
install_github("CTrierMaansson/ALKfusiondiscover")
library(ALKfusiondiscover)
H3122_bam <- system.file("extdata", "H3122_EML4.bam", package = "ALKfusiondiscover")
HCC827_bam <-  system.file("extdata", "HCC827_EML4.bam", package = "ALKfusiondiscover")
if (!require(devtools)) install.packages('devtools')
library(devtools)
install_github("CTrierMaansson/ALKfusiondiscover")
library(ALKfusiondiscover)
?strsplit
devtools::document()
detach("package:ALKfusiondiscover", unload = TRUE)
remove.packages("ALKfusiondiscover")
install_github("CTrierMaansson/ALKfusiondiscover")
library(ALKfusiondiscover)
library(ALKfusiondiscover)
H3122_bam <- system.file("extdata", "H3122_EML4.bam", package = "ALKfusiondiscover")
HCC827_bam <-  system.file("extdata", "HCC827_EML4.bam", package = "ALKfusiondiscover")
head(EML4_ALK_detection(H3122_bam))
.rs.restartR()
library(ALKfusiondiscover)
H3122_bam <- system.file("extdata", "H3122_EML4.bam", package = "ALKfusiondiscover")
HCC827_bam <-  system.file("extdata", "HCC827_EML4.bam", package = "ALKfusiondiscover")
head(EML4_ALK_detection(H3122_bam))
EML4_ALK_detection(HCC827_bam)
break_position(EML4_ALK_detection(H3122_bam))
break_position_depth(EML4_ALK_detection(H3122_bam))
break_position_depth(H3122, EML4_ALK_detection(H3122_bam))
break_position_depth(H3122_bam, EML4_ALK_detection(H3122_bam))
EML4_sequence(EML4_ALK_detection(H3122_bam))
ALK_sequence(EML4_ALK_detection(H3122_bam))
devtools::document()
remove.packages("ALKfusiondiscover")
install_github("CTrierMaansson/ALKfusiondiscover")
.rs.restartR()
install_github("CTrierMaansson/ALKfusiondiscover")
library(ALKfusiondiscover)
H3122_bam <- system.file("extdata", "H3122_EML4.bam", package = "ALKfusiondiscover")
HCC827_bam <-  system.file("extdata", "HCC827_EML4.bam", package = "ALKfusiondiscover")
head(EML4_ALK_detection(H3122_bam))
EML4_ALK_detection(HCC827_bam)
break_position(EML4_ALK_detection(H3122_bam))
break_position_depth(H3122_bam, EML4_ALK_detection(H3122_bam))
library(GenomicRanges)
library(bamsignals)
?bamCoverage
devtools::document()
.rs.restartR()
install_github("CTrierMaansson/ALKfusiondiscover")
library(ALKfusiondiscover)
H3122_bam <- system.file("extdata", "H3122_EML4.bam", package = "ALKfusiondiscover")
HCC827_bam <-  system.file("extdata", "HCC827_EML4.bam", package = "ALKfusiondiscover")
head(EML4_ALK_detection(H3122_bam))
break_position_depth(H3122_bam, EML4_ALK_detection(H3122_bam))
break_position(EML4_ALK_detection(H3122_bam))
EML4_sequence(EML4_ALK_detection(H3122_bam))
ALK_sequence(EML4_ALK_detection(H3122_bam))
?EML4_ALK_detection
?EML4_sequence
class("hg38")
if (!require(devtools)) install.packages('devtools')
library(devtools)
install_github("CTrierMaansson/ALKfusiondiscover")
library(ALKfusiondiscover)
H3122_results <- EML4_ALK_analysis(file = H3122_bam, genome = "hg38", mates = 2, basepairs = 20)
HCC827_results <- EML4_ALK_analysis(file = HCC827_bam, genome = "hg38", mates = 2, basepairs = 20)
knit_with_parameters("C:/Users/Christoffer/Downloads/tes1.Rmd")
unlink("C:/Users/Christoffer/Downloads/tes1_cache", recursive = TRUE)
tinytex:::install_prebuilt()
